diff a/Assets/01.Scripts/MillUI.cs b/Assets/01.Scripts/MillUI.cs	(rejected hunks)
@@ -2,20 +2,108 @@
 using System.Collections.Generic;
 using UnityEngine;
 using UnityEngine.UI;
+using DG.Tweening;
 
 public class MillUI : MonoBehaviour
 {
-    //�̹������� ũ��
-    private const float bigSize = 1f;
-    private const float middleSize = 0.9f;
-    private const float smallSize = 0.75f;
-
     //�̹������� x��ġ��
-    private readonly int[] xPostions =
+    public readonly int[] positions =
     {
         -670, -360, 0, 360, 670
     };
+    //�̹������� ũ��
+    public readonly float[] scales =
+    {
+        0.75f, 0.9f, 1f, 0.9f, 0.75f
+    };
+
+    public int[] sortIndexs;
 
     //�������� �̹������� ��ġ
-    public RectTransform[] imageTrms;
+    public List<RectTransform> images = new List<RectTransform>();
+    public List<RectTransform> endImages = new List<RectTransform>(); // 0 = Left, 1 = Right
+
+    private void Start()
+    {
+        sortIndexs = new int[]
+        {
+            images[0].GetSiblingIndex(),
+            images[1].GetSiblingIndex(),
+            images[2].GetSiblingIndex(),
+            images[3].GetSiblingIndex(),
+            images[4].GetSiblingIndex()
+        };
+
+        StartCoroutine(MoveRight());
+    }
+
+    /// <summary>
+    /// ���ۼ�UI�� ���������� �̵������ִ� �Լ�
+    /// </summary>
+    public IEnumerator MoveRight()
+    {
+        //��� endImage�� �����ϰ�
+        for (int i = 0; i < endImages.Count; i++)
+        {
+            Image image = endImages[i].GetComponent<Image>();
+            Color color = new Color(image.color.r, image.color.g, image.color.b, 0);
+            image.color = color;
+
+            endImages[i].localScale = Vector3.zero;
+        }
+
+        for (int i = 0; i < images.Count; i++)
+        {
+            int a = i; //�̻��� Ŭ������ �̷��� ��ߵ�
+
+            if (i == images.Count - 1) //�� �������̶��
+            {
+                //������ ���� �ִ� image�� �Ⱥ��̰� ���ְ�
+                images[a].GetComponent<Image>().DOFade(0, 0.5f);
+                images[a].DOScale(0, 0.5f);
+
+                //���ʿ��ִ� endImage�� ������ ���ش�
+                endImages[0].GetComponent<Image>().DOFade(1, 0.5f);
+                endImages[0].DOScale(0.75f, 0.5f);
+                continue;
+            }
+
+            Vector2 temp = new Vector2(positions[(a + 1) % images.Count], images[a].anchoredPosition.y);
+
+            DOTween.To(() => images[a].anchoredPosition, pos => images[a].anchoredPosition = pos, temp, 0.5f);
+            images[a].DOScale(scales[(a + 1) % images.Count], 0.5f);
+        }
+
+        yield return new WaitForSeconds(0.5f);
+
+        //ũ��� ��ġ��� �ٽ� ����Ʈ ����
+        List<RectTransform> tempList = new List<RectTransform>()
+        {
+            endImages[0], images[0], images[1], images[2], images[3]
+        };
+
+        List<RectTransform> tempEndList = new List<RectTransform>()
+        {
+            images[4], endImages[1]
+        };
+
+        images = tempList;
+        endImages = tempEndList;
+
+        //���̶�Ű�信�� ����
+        for (int i = 0; i < 5; i++)
+        {
+            images[i].SetSiblingIndex(sortIndexs[i]);
+        }
+
+
+    }
+
+    /// <summary>
+    /// ���ۼ�UI�� �������� �̵������ִ� �Լ�
+    /// </summary>
+    public void MoveLeft()
+    {
+        
+    }
 }
